// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

package hello

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloTask struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Timestamp            int32    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Response             string   `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloTask) Reset()         { *m = HelloTask{} }
func (m *HelloTask) String() string { return proto.CompactTextString(m) }
func (*HelloTask) ProtoMessage()    {}
func (*HelloTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{0}
}

func (m *HelloTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloTask.Unmarshal(m, b)
}
func (m *HelloTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloTask.Marshal(b, m, deterministic)
}
func (m *HelloTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloTask.Merge(m, src)
}
func (m *HelloTask) XXX_Size() int {
	return xxx_messageInfo_HelloTask.Size(m)
}
func (m *HelloTask) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloTask.DiscardUnknown(m)
}

var xxx_messageInfo_HelloTask proto.InternalMessageInfo

func (m *HelloTask) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HelloTask) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *HelloTask) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloTask)(nil), "hello.HelloTask")
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor_61ef911816e0a8ce) }

var fileDescriptor_61ef911816e0a8ce = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0xcd, 0xc9,
	0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x22, 0xb9, 0x38, 0x3d,
	0x40, 0x8c, 0x90, 0xc4, 0xe2, 0x6c, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x48, 0x86, 0x8b, 0xb3, 0x24, 0x33, 0x37, 0xb5, 0xb8,
	0x24, 0x31, 0xb7, 0x40, 0x82, 0x59, 0x81, 0x51, 0x83, 0x35, 0x08, 0x21, 0x20, 0x24, 0xc5, 0xc5,
	0x51, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0xc1, 0x02, 0xd6, 0x05, 0xe7, 0x1b, 0x3d,
	0x62, 0xe4, 0xe2, 0x01, 0x9b, 0x1d, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a, 0x64, 0xcd, 0x25,
	0x18, 0x5c, 0x52, 0x94, 0x9a, 0x98, 0x0b, 0x11, 0x05, 0x33, 0x85, 0x04, 0xf4, 0x20, 0xae, 0x82,
	0xbb, 0x42, 0x0a, 0x43, 0x44, 0x83, 0xd1, 0x80, 0x51, 0xc8, 0x98, 0x8b, 0x1b, 0x49, 0x33, 0x71,
	0xda, 0x40, 0x9a, 0x48, 0xb4, 0xcb, 0x80, 0x51, 0x48, 0x9b, 0x8b, 0x95, 0x68, 0x3b, 0x92, 0xd8,
	0xc0, 0xa1, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x34, 0xe0, 0xac, 0x44, 0x5c, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloServiceClient is the client API for HelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloServiceClient interface {
	StreamHelloStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_StreamHelloStreamClient, error)
	StreamHello(ctx context.Context, opts ...grpc.CallOption) (HelloService_StreamHelloClient, error)
	HelloStream(ctx context.Context, in *HelloTask, opts ...grpc.CallOption) (HelloService_HelloStreamClient, error)
	Hello(ctx context.Context, in *HelloTask, opts ...grpc.CallOption) (*HelloTask, error)
}

type helloServiceClient struct {
	cc *grpc.ClientConn
}

func NewHelloServiceClient(cc *grpc.ClientConn) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) StreamHelloStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_StreamHelloStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[0], "/hello.HelloService/StreamHelloStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceStreamHelloStreamClient{stream}
	return x, nil
}

type HelloService_StreamHelloStreamClient interface {
	Send(*HelloTask) error
	Recv() (*HelloTask, error)
	grpc.ClientStream
}

type helloServiceStreamHelloStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceStreamHelloStreamClient) Send(m *HelloTask) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceStreamHelloStreamClient) Recv() (*HelloTask, error) {
	m := new(HelloTask)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) StreamHello(ctx context.Context, opts ...grpc.CallOption) (HelloService_StreamHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[1], "/hello.HelloService/StreamHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceStreamHelloClient{stream}
	return x, nil
}

type HelloService_StreamHelloClient interface {
	Send(*HelloTask) error
	CloseAndRecv() (*HelloTask, error)
	grpc.ClientStream
}

type helloServiceStreamHelloClient struct {
	grpc.ClientStream
}

func (x *helloServiceStreamHelloClient) Send(m *HelloTask) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceStreamHelloClient) CloseAndRecv() (*HelloTask, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloTask)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) HelloStream(ctx context.Context, in *HelloTask, opts ...grpc.CallOption) (HelloService_HelloStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[2], "/hello.HelloService/HelloStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloService_HelloStreamClient interface {
	Recv() (*HelloTask, error)
	grpc.ClientStream
}

type helloServiceHelloStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloStreamClient) Recv() (*HelloTask, error) {
	m := new(HelloTask)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) Hello(ctx context.Context, in *HelloTask, opts ...grpc.CallOption) (*HelloTask, error) {
	out := new(HelloTask)
	err := c.cc.Invoke(ctx, "/hello.HelloService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloServiceServer is the server API for HelloService service.
type HelloServiceServer interface {
	StreamHelloStream(HelloService_StreamHelloStreamServer) error
	StreamHello(HelloService_StreamHelloServer) error
	HelloStream(*HelloTask, HelloService_HelloStreamServer) error
	Hello(context.Context, *HelloTask) (*HelloTask, error)
}

// UnimplementedHelloServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServiceServer struct {
}

func (*UnimplementedHelloServiceServer) StreamHelloStream(srv HelloService_StreamHelloStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamHelloStream not implemented")
}
func (*UnimplementedHelloServiceServer) StreamHello(srv HelloService_StreamHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamHello not implemented")
}
func (*UnimplementedHelloServiceServer) HelloStream(req *HelloTask, srv HelloService_HelloStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloStream not implemented")
}
func (*UnimplementedHelloServiceServer) Hello(ctx context.Context, req *HelloTask) (*HelloTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}

func RegisterHelloServiceServer(s *grpc.Server, srv HelloServiceServer) {
	s.RegisterService(&_HelloService_serviceDesc, srv)
}

func _HelloService_StreamHelloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).StreamHelloStream(&helloServiceStreamHelloStreamServer{stream})
}

type HelloService_StreamHelloStreamServer interface {
	Send(*HelloTask) error
	Recv() (*HelloTask, error)
	grpc.ServerStream
}

type helloServiceStreamHelloStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceStreamHelloStreamServer) Send(m *HelloTask) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceStreamHelloStreamServer) Recv() (*HelloTask, error) {
	m := new(HelloTask)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloService_StreamHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).StreamHello(&helloServiceStreamHelloServer{stream})
}

type HelloService_StreamHelloServer interface {
	SendAndClose(*HelloTask) error
	Recv() (*HelloTask, error)
	grpc.ServerStream
}

type helloServiceStreamHelloServer struct {
	grpc.ServerStream
}

func (x *helloServiceStreamHelloServer) SendAndClose(m *HelloTask) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceStreamHelloServer) Recv() (*HelloTask, error) {
	m := new(HelloTask)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloService_HelloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloTask)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServiceServer).HelloStream(m, &helloServiceHelloStreamServer{stream})
}

type HelloService_HelloStreamServer interface {
	Send(*HelloTask) error
	grpc.ServerStream
}

type helloServiceHelloStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloStreamServer) Send(m *HelloTask) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.HelloService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).Hello(ctx, req.(*HelloTask))
	}
	return interceptor(ctx, in, info, handler)
}

var _HelloService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HelloService_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHelloStream",
			Handler:       _HelloService_StreamHelloStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamHello",
			Handler:       _HelloService_StreamHello_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloStream",
			Handler:       _HelloService_HelloStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hello.proto",
}
